=== Tags ===
hints; links; programming tools; syntax bash;
=== Header ===
Useful Git Hints
=== Summary ===
Collection of frequently needed git commands.
=== Body ===

Some neat [git hints](http://mislav.uniqpath.com/2010/07/git-tips/) one should
look at.

Git settings are stored globally and locally. It is often convenient to change
them directly. Global configs could be change like:

<pre class='brush: bash'>
$ cd ~
$ sublime_text .gitconfig
</pre>

and local could be changed like:

<pre class='brush: bash'>
$ cd repo_dir/.git
$ sublime_text config
</pre>

### User Experience

To turn on terminal coloring:

<pre class='brush: bash'>$ git config --global color.ui auto</pre>

### Initialization

Local copy of the repository could be created via cloning from remote
repository:

<pre class='brush: bash'>
$ git clone git+ssh://user:password@path.to/repository/location.git destanation_name
</pre>

or local copying with subsequent update of remote url:

<pre class='brush: bash'>
$ git clone --local file:///C:/path/to/repo folder_name
$ cd folder_name
$ git remote set-url origin git+ssh://user:password@path.to/repository/location.git
</pre>

### Updates

Targeted pushes and pulls are as follows:

<pre class='brush: bash'>
$ git push origin local_branch_name:remote_branch_name
$ git pull origin remote_branch_name:local_branch_name
</pre>

If you want completely synchronize your master branch with remote master:

<pre class='brush: bash'>
$ git reset --hard origin/master
</pre>

Adding updates from changed branch to fresh branch:

<pre class='brush: bash'>
$ git pull --rebase fresh_branch_name changed_branch_name
</pre>

If only files from some folder need to be updated
([more](http://stackoverflow.com/questions/449541/how-do-you-merge-selective-files-with-git-merge)
on subject):

<pre class='brush: bash'>
$ git checkout other_branch -- path/to/folder
</pre>

To see which files differ between branches:

<pre class='brush: bash'>
$ git diff --name-status first_branch_name second_branch_name
</pre>

### Undo

Often you want to reverse slightly just the last commit. In this case:

<pre class='brush: bash'>
$ git reset --soft HEAD^
# do some work
$ git commit -c ORIG_HEAD
$ git push push_specifictions --force
</pre>

### Growth Management

Once you need to clean up all local copies of branches which was already
removed from the master repository:

<pre class='brush: bash'>$ git remote prune origin</pre>

To remove remote branch:

<pre class='brush: bash'>$ git branch -D -r remote_branch_name</pre>

### Cloning or Updating Massive Repo

If you want to checkout a massive repository, it could cause some memory
problems of the type: `fatal: The remote end hung up unexpectedly`. In such a
situations one should better increment `http.postBuffer`, turn off
compression, do a shallow pull, followed by residual pull, followed by
normal pull:

<pre class='brush: bash'>
$ git config --global http.postBuffer 524288000
$ git config --global core.compression 0
$ git clone --depth 1 repo_uri
$ git fetch --unshallow
$ git pull --all
</pre>

### Individual File

One could investigate file change between commits:

<pre class='brush: bash'>
$ git diff start_commit..finish_commit -- path/to/file
</pre>

Or between branches:

<pre class='brush: bash'>
$ git diff first_branch_name:path/to/file second_branch_name:path/to/file
</pre>

To exclude file from repo:

<pre class='brush: bash'>
$ git rm --cached path/to/file
</pre>

To exclude file from commit-index (what will be affected by commit), without
change of file modifications:

<pre class='brush: bash'>
$ git reset path/to/file
</pre>

To change file to a specific commit state:

<pre class='brush: bash'>
$ git checkout commit -- path/to/file
</pre>

### Stashing

To shelve all current changes and return to HEAD:

<pre class='brush: bash'>
$ git stash
</pre>

After some necessary work is done, one could return back by:

<pre class='brush: bash'>
$ git stash apply
$ git stash drop
</pre>

## Unsorted

Hooks that would checkout on commit: https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks

All githooks: http://git-scm.com/docs/githooks

Clone local git repo: http://stackoverflow.com/questions/2519933/git-clone-repo-across-local-file-system-in-windows

List all file changed in commit or between commits:
http://stackoverflow.com/questions/424071/list-all-the-files-for-a-commit-in-git