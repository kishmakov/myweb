=== Tags ===
design philosophy; syntax haskell; syntax cpp; syntax mathjax;
=== Header ===
On Symbolic Finiteness
=== Summary ===
Thoughts on the relationship between finiteness of program symbolic
representation and finiteness of architectural entity set.
=== Body ===
## Finiteness as Trait

Once we think about program, we could highlight two of its aspects:

* its textual representation
* its destination architecture

These aspects are related by compilation process. During compilation textual
representation turns into executable of destination architecture.

While programs textual representation can significantly vary from language
to language, next property is invariant: every program splits into finite
number of pieces which are operators and named entities such as variables and
functions. While operators number is bounded by language design what do we
mean by finiteness of named entities?

Often there is no theoretical bound for number of named entities. There is
only engineering bound caused by general finiteness of underling machine such
as operative memory and disk. But in practice human mind refuses to percept
effectively more then certain small number of named entities. This finiteness
of textual representation naturally transforms into finiteness of destination
architecture during compilation.

Once the destination architecture is hardware then its finiteness conditioned
by hardware design and manufacturing processes limitations. Those limitation
imply finiteness of instruction set, registers scheme and native data types.

If the destination scheme is not a hardware, we could iterate aforementioned
transformation and obtain current limitations in an inductive manner.
Moreover, if we track this hardware finiteness up to textual representation,
we would see that programming languages operator set finiteness is conditioned
by hardware finiteness.

## Unified Setting

Our main intentions is to construct a unified setting which would provide a
language for natural description of finiteness as essential trait of
computational code. We would use next couple of examples for illustration needs:

<pre class='brush: cpp'>
// C++ snippet: greatest common divisor
unsigned int gcd(unsigned int a, unsigned int b)
{
    return b == 0 ? a : gcd(b, a % b);
}
</pre>

<pre class='brush: haskell'>
-- Haskell snippet: double list numbers
dbl :: [Int] -> [Int]
dbl = foldr (\ x xs -> [2 * x] ++ xs) []
</pre>

### Symbolic Structure

Let us start to think about program execution in a bottom-up manner.
Underlying machine always operates sequentially. This discretization is
essentially determined by original sequential digital logic used for circuit
construction.

Underlying sequentiality could be lifted to the level of textual
representation with some caveats. Those caveats could be important once we
deal with parallel computing but for sequential computing they are of minor
interest.

In the first snippet there are five symbols which are initially undefined but
could become definite along computation:

1. input value `a`
2. input value `b`
3. `a % b`
4. `gcd(b, a % b)`
5. return value

In the second snippet there are 7 symbols which are initially undefined and
all of them would become definite along computation:

1. input value denoted as `i:is`
2. `is`, tail of `i:is`
3. `dbl is`
4. `i`, first element of `i:is`
5. `[2 * i]`
6. `[2 * i] ++ (dbl is)`
7. return value

In each of these two examples there are two possibility of assignation of
definite value to the return value holder. Because of this separation of
return value into separate symbol looks natural. It seems to be convenient
to distinguish input values and return values in all scheme to make them more
uniform.

It is clear at this point that every piece of code could be characterized by
some number of such a symbols. At every moment during the execution each of
these symbols could be undefined or assigned some value.

### Finite Automaton

In general state of the program could be described with a triple

* subset of definite symbols
* assignment of values to those symbols
* position of the cursor

Necessity of the cursor position become obvious if we would think about
nontrivial loop. Once program execution enters this loop body, it could happen
that subset of defined symbols and its values are not a sufficient information
for deduction of current position. Such triples provides full description of
the program state at run time.

How the program could be characterized prior the execution? It is clear that
cursor position uniquely determine subset of defined symbols. Also the set of
possible values of defined symbols depends on cursor position as well but at
the moment we would not exploit this relation. We could summarize this
observation as follows.

We could summarize these remarks with following more formal description:

* each piece of code is described by set \(P = \{1, \dots, n\}\) of cursor
  positions and set \(S = \{1, \dots, m\}\) of symbols
* each symbol \(s \in S\) is accompanied by its value set \(VS[s]\)
* each cursor position \(p \in P\) is accompanied by the subset of defined
  symbols \(d[p] \subset S\)

In provided terms execution of such a piece of code is a sequence of pairs

$$
\left(p_k \in P, C_k \in \prod_{s \in d[p_k]} VS[s]\right), ~~ k \in \{1, \dots, N\}
$$

where with \(C_k\) we denote assignment of values to defined symbols.

Each transition between subsequent states
$$
\left(p_k, C_k\right) \rightarrow \left(p_{k+1}, C_{k+1}\right)
$$
is self-contained and recomputes or defines symbols locally. By this we mean
application of one operator or named functor.

### Automaton Visualization

<center>![Alt text](/static/images/cpp_snippet.png)</center>

<center>![Alt text](/static/images/haskell_snippet.png)</center>